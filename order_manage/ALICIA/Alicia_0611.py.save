# -*- coding: utf-8 -*-
"""
Created on Wed Apr  1 22:51:04 2020
"""
import sys
import re
import os
import pandas as pd
import time
import numpy as np
import msoffcrypto as ms
import ntpath
import xlrd
from datetime import datetime, timedelta, date as date_function
import pyDes
import base64
from order_manage.models import Qingye_Niancai_raw_record


class ALICIA:

    def __init__(self):
        self.data_path = os.path.join(os.path.dirname(__file__),'data')
        self.platforms = self._get_platforms()    # 共有哪一些平台的資料需要整合
        self.platform_name_rules = self._build_platform_name_patterns()    # 讀取分析各平台報告的檔案名稱規則
        self.aggregated_txns_columns = self._get_aggregated_txns_columns()    # 整合報表包含哪些欄位
        self.raw_txns_dir = os.path.join(os.path.abspath(os.curdir), 'order_manage/ALICIA/decrypt')  # 存放『從各平台下載的報表』的資料夾路徑
        # self.decr_raw_txns_dir = os.path.join(os.path.abspath(os.curdir), 'order_manage/ALICIA/decrypt')  # 存放『需要密碼的』已解密的報表的資料夾路徑 
        self.aggregated_txns = self._build_aggregated_txns_table()    # 存放整合交易的DATAFRAME
        self.user_uploaded_aggregated_txns = self._build_aggregated_txns_table()    # 存放user主動上傳整合交易檔的DATAFRAME
        self.unique_aggregated_txns = self._build_aggregated_txns_table()    # 存放整合交易的TABLE
        self.log_content = []    # 存放使用紀錄, 目前(2020.04.02)還沒想到要怎麼做
        self.password_dict = self._get_passwords()  # 回傳密碼集
        self.vendors = self._get_vendors()   # 回傳兩種型態的vendors
        

    def check_if_all_files_are_good_for_ALICIA_pipeline(self, file_list):
        # 在這個函式當中, 我們將檢查【檔案命名】以及其【附檔名】是否皆符合我們的要求
        # 檔案命名指的, 其是否meet一種我們的平台交易資料的正則表達式情境

        def check_if_all_are_excel_files(file_list):
            exception_files = []
            criteria = ('xlsx', 'xlsm', 'xls', 'csv', 'xlsb')
            meet_criteria = 0
            for each_file in file_list:
                if each_file.endswith(criteria):
                    meet_criteria += 1
                    # 加總符合條件的檔案, 接著拿這個數字比對檔案數量就知道是不是都符合條件了
                else:
                    exception_files.append(each_file)
            return (meet_criteria == len(file_list), sorted(exception_files))

        def check_if_each_file_meets_1_regex_condition(file_list):
            exception_files = []
            for each_file in file_list:
                is_meet_criteria = 0
                for each_re_rule in self.platform_name_rules.values():
                    if re.search(each_re_rule, each_file) is not None:
                        # meet到特定的平台命名規則了
                        is_meet_criteria = 1
                        break
                if not is_meet_criteria:
                    exception_files.append(each_file)  
            return (len(exception_files)==0, sorted(exception_files))
        
        return_excel_check, exceptions_excel_check = \
            check_if_all_are_excel_files(file_list)
        
        return_regex_check, exceptions_regex_check = \
            check_if_each_file_meets_1_regex_condition(file_list)
        
        return  (return_excel_check+return_regex_check==2,
                 sorted(list(set(exceptions_excel_check+exceptions_regex_check))))
    
    def check_if_the_xl_file_is_encrypted(self, file):
        try:
            # 如果沒有加密的話就能直接打開
            xlrd.open_workbook(file)
            # print(file, 'is NOT encrypted.')
            return False
        except:
            # print(file, 'is encrypted.')
            return True

    def move_files_and_decrypt_them(self, from_dir, to_dir):
        # 先移動需要密碼的那幾個平台, 因為處理方式略為不同
        assert from_dir != to_dir
        for encrypted_platform in ['MOMO', '亞伯', '東森得易購', '特力家Online店']:
            encrypted_txn_files = self._return_txn_path(from_dir, encrypted_platform)
            if encrypted_platform == '亞伯':
                encrypted_txn_files = [_ for _ in encrypted_txn_files if 'shipmentReport' not in _]
            
            print('encrypted_txn_files', encrypted_txn_files)
            for each_encrypted_txn_file in encrypted_txn_files:
                # 下面這句是將路徑/檔案名 分解成 路徑, 檔案名, 使用ntpath在linux與windows環境下都可以正常運作
                _, tail_of_file = ntpath.split(each_encrypted_txn_file)
                print(f'Encrypted files: {each_encrypted_txn_file}')
                if self.check_if_the_xl_file_is_encrypted(each_encrypted_txn_file):
                    try:
                        # 嘗試進行解密
                        the_file = ms.OfficeFile(open(each_encrypted_txn_file, 'rb'))
                        the_file.load_key(password=self.password_dict[encrypted_platform])
                        the_file.decrypt(open(os.path.join(to_dir, tail_of_file), 'wb'))
                    except Exception as e:
                        the_file = ms.OfficeFile(open(each_encrypted_txn_file, 'rb'))
                        the_file.load_key(password='')
                        the_file.decrypt(open(os.path.join(to_dir, tail_of_file), 'wb'))
                        pass
                    print(f'each_encrypted_txn_file: {each_encrypted_txn_file}')
                    print(f'os.path.join(to_dir, tail_of_file): {os.path.join(to_dir, tail_of_file)}')
                    try:
                        os.unlink(each_encrypted_txn_file)
                    except Exception as e:
                        print(f'move_files_and_decrypt_them EXCEPTION(2): {e}')
                        # os.unlink(each_encrypted_txn_file)
                    # print('Successfully Moved ', tail_of_file)
        # 把剩下的檔案移一移, 包括原先就沒有加密的跟理論上會加密但沒有加密的那些檔案
        for each_file in os.listdir(from_dir):
            os.rename(
                os.path.join(from_dir, each_file),
                os.path.join(to_dir, each_file)
            )
            # print('Successfully Moved ', tail_of_file)

    def delete_files_in_the_folder(self, folder_path):
        for each_file in os.listdir(folder_path):
            # 盡可能刪除裡面所有的檔案
            try:
                if not each_file.endswith('fortracked'):
                    os.unlink(os.path.join(folder_path, each_file))
                    print(each_file)
            except:
                pass

    def force_float_to_be_int_and_to_string(self, target):
            _result = target
            try:
                _result = str(int(target))
            except:
                _result = str(target)
            return _result

    def pre_clean_raw_txns(self, unique_ids_in_database=None):
        if self.aggregated_txns.shape[0] > 0:
            self.aggregated_txns['訂單編號'] = self.aggregated_txns['訂單編號'].apply(self.force_float_to_be_int_and_to_string)
            # self.aggregated_txns 至少要有東西再清理
            # 以通路 + 編號 + 內容物作為暫時的unique_id,
            # 來作為A交易在昨天與今天一起被重複匯進來的處理機制
            self.aggregated_txns['內容物'] = self.aggregated_txns['內容物'].apply(lambda x: re.sub(r'神老師推薦》\s{0,4}', '神老師推薦》', x))
            self.aggregated_txns['內容物'] = self.aggregated_txns['內容物'].apply(lambda x: re.sub(r'《青葉臺菜X神老師推薦》\s{0,4}冰箱', '《神老師推薦》冰箱', x))
            self.aggregated_txns['規格'] = self.aggregated_txns['規格'].apply(lambda x: re.sub(r'輕滋', ' ', x))
            self.aggregated_txns['規格'] = self.aggregated_txns['規格'].apply(lambda x: re.sub(r'到貨日\s{0,2}:\s{0,2}', ' ', x))

            try:
                print(f'pre_clean_raw_txns1 {self.aggregated_txns}')
                self.aggregated_txns.loc[:, 'pre_clean_unique_id'] = self.aggregated_txns['通路'] + '|' + \
                    self.aggregated_txns['訂單編號'].apply(self.force_float_to_be_int_and_to_string) + '|' + \
                    self.aggregated_txns['供應商'] + '|' + self.aggregated_txns['內容物']
                    # self.aggregated_txns['訂單編號'].astype(str) + '-' + \
                self.aggregated_txns = self.aggregated_txns.drop_duplicates(subset='pre_clean_unique_id', keep='first')
                self.aggregated_txns = self.aggregated_txns.sort_values('pre_clean_unique_id').reset_index(drop=True)
                self.aggregated_txns = self.aggregated_txns.drop(['pre_clean_unique_id'], axis=1)
                print(f'pre_clean_raw_txns2 {self.aggregated_txns}')
            except Exception as e:
                print(f'pre_clean_raw_txns_ERROR {e}')

            
            # >> 以通路 + 供應商 + 編號 作為unique_id  2020.11.22
            # 2021.01.15 為官網的青葉年菜另做處理
            try:
                # print(f'before making unique_id col: {self.aggregated_txns.columns}')
                official_qingye_txn_ids = self.aggregated_txns[
                    (self.aggregated_txns['通路'] == '樂天派官網') &
                    ((self.aggregated_txns['內容物'].str.contains('青葉臺菜')) | 
                    (self.aggregated_txns['內容物'].str.contains('青葉台菜')))]['訂單編號'].unique()
                self.aggregated_txns.loc[:, 'unique_id'] = \
                    self.aggregated_txns['通路'] + '|'\
                    + self.aggregated_txns['供應商'] + '|'\
                    + self.aggregated_txns['訂單編號']
                print(f'pre_clean_raw_txns3 {self.aggregated_txns.shape}')
                self.aggregated_txns.loc[self.aggregated_txns['訂單編號'].isin(official_qingye_txn_ids), 'unique_id'] = \
                    self.aggregated_txns[self.aggregated_txns['訂單編號'].isin(official_qingye_txn_ids)]['通路'] + '|'\
                    + self.aggregated_txns[self.aggregated_txns['訂單編號'].isin(official_qingye_txn_ids)]['供應商'] + '|'\
                    + self.aggregated_txns[self.aggregated_txns['訂單編號'].isin(official_qingye_txn_ids)]['訂單編號'].apply(self.force_float_to_be_int_and_to_string) + '|'\
                    + self.aggregated_txns[self.aggregated_txns['訂單編號'].isin(official_qingye_txn_ids)]['內容物'][-20:]
                print(f'pre_clean_raw_txns4 {self.aggregated_txns.shape}')
                #self.aggregated_txns.loc[:, 'unique_id'] = \
                #    self.aggregated_txns['通路'] + '|'\
                #    + self.aggregated_txns['供應商'] + '|'\
                #    + self.aggregated_txns['訂單編號'].apply(self.force_float_to_be_int_and_to_string)
                #print(f'after making unique_id col: {self.aggregated_txns.columns}')
                #print(f'pre_clean_raw_txns_making_unique_ids: {self.aggregated_txns.unique_id}')
            except Exception as e:
                print(f'pre_clean_raw_txns_making_unique_ids error: {e}')
            #self.aggregated_txns.loc[:, 'unique_id'] = self.aggregated_txns['通路'] + '|' + \
            #    self.aggregated_txns['供應商'] + '|' + \
            #    self.aggregated_txns['訂單編號'].apply(self.force_float_to_be_int_and_to_string)

            # 2021.01.10 >> 針對 輕滋百蔬宴米糕 做特別處理
            self.aggregated_txns.loc[:, '規格'] = \
                self.aggregated_txns.loc[:, '規格'].apply(lambda x: re.sub(r'輕滋百蔬宴米糕', ' 百蔬宴米糕', x)).apply(lambda x: re.sub(r'加購-錵魚一夜干', '加購 - 錵魚一夜干', x))

            # 把Qingye 的 txn_id + content + vendor 當作unique_id做比對
            qingye_unique_string = \
                [f'{i}-{j}' for i, j in Qingye_Niancai_raw_record.objects.values_list('txn_id', 'content')]
            if len(qingye_unique_string):
                # 如果有值再比對就好，這裡要剔除裡面已經有的資料，避免重複計算
                repeated_index = \
                    self.aggregated_txns[
                        (self.aggregated_txns['通路'] == '樂天派官網') &
                        (self.aggregated_txns['訂單編號'] + '-' + self.aggregated_txns['內容物']).isin(qingye_unique_string)].index
                self.aggregated_txns = self.aggregated_txns[~self.aggregated_txns.index.isin(repeated_index)]
            print(f'pre_clean_raw_txns5 {self.aggregated_txns.shape}')
            #print(f'check in pre_clean_function 1: {self.aggregated_txns}')
            # 針對亞伯做特殊處理
